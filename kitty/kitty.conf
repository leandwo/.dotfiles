# vim:fileencoding=utf-8:ft=conf:foldmethod=marker

include ./theme.conf

font_family      MesloLGS NF
font_size 14.0
disable_ligatures always

copy_on_select clipboard
strip_trailing_spaces smart

#: Terminal bell {{{
# enable_audio_bell yes
# visual_bell_duration 0.0
# window_alert_on_bell yes
# bell_on_tab yes
# command_on_bell none

#: Window layout {{{
# remember_window_size  yes
# initial_window_width  640
# initial_window_height 400
# enabled_layouts *  # TODO remove unused layouts
enabled_layouts tall,fat,stack
#: layouts: https://sw.kovidgoyal.net/kitty/index.html#layouts.
# window_resize_step_cells 2
# window_resize_step_lines 2
window_border_width 1
draw_minimal_borders no
window_margin_width 0
# single_window_margin_width -1
window_padding_width 0
# placement_strategy center
active_border_color #98c379
inactive_border_color #565c64
bell_border_color #e5c07b
inactive_text_alpha 0.65
hide_window_decorations yes
# resize_debounce_time 0.1
# resize_draw_strategy static
# resize_in_steps no
confirm_os_window_close 1


#: Tab bar {{{
tab_bar_edge bottom

# tab_bar_margin_width 0.0
# tab_bar_margin_height 0.0 0.0
tab_bar_style separator
#: The tab bar style, can be one of: fade, separator, powerline, or
#: hidden. In the fade style, each tab's edges fade into the
#: background 
tab_bar_min_tabs 1
tab_switch_strategy right
tab_fade 0.25 0.5 0.75 1
tab_separator " "
tab_powerline_style angled
# tab_activity_symbol * 
tab_title_template " {index}{sup.num_windows if num_windows > 1 else ''}: {title} "
# active_tab_title_template none

# TODO: finish settings up kitty conf
background_opacity 0.8
# background_image none
# background_image_layout tiled
# background_image_linear no
# dynamic_background_opacity no
background_tint 0.5
# dim_opacity 0.75
# selection_foreground #000000
# selection_background #fffacd


# color0 #000000
# color8 #767676
#: black
# color1 #cc0403
# color9 #f2201f
#: red
# color2  #19cb00
# color10 #23fd00
#: green
# color3  #cecb00
# color11 #fffd00
#: yellow
# color4  #0d73cc
# color12 #1a8fff
#: blue
# color5  #cb1ed1
# color13 #fd28ff
#: magenta
# color6  #0dcdcd
# color14 #14ffff
#: cyan
# color7  #dddddd
# color15 #ffffff
#: white


#: Advanced {{{
# shell .

editor /usr/local/bin/nvim
# close_on_child_death no
# allow_remote_control no

# env 

#: Specify environment variables to set in all child processes. Note
#: that environment variables are expanded recursively, so if you
#: use::

#:     env MYVAR1=a
#:     env MYVAR2=${MYVAR1}/${HOME}/b

# update_check_interval 24

# TODO startup sessions?
# startup_session none

#: Path to a session file to use for all kitty instances. Can be
#: overridden by using the kitty --session command line option for
#: individual instances. See
#: https://sw.kovidgoyal.net/kitty/index.html#sessions in the kitty
#: documentation for details. Note that relative paths are interpreted
#: with respect to the kitty config directory. Environment variables
#: in the path are expanded. Changing this option by reloading the
#: config is not supported.

# clipboard_control write-clipboard write-primary

#: Allow programs running in kitty to read and write from the
#: clipboard. You can control exactly which actions are allowed. The
#: set of possible actions is: write-clipboard read-clipboard write-
#: primary read-primary. You can additionally specify no-append to
#: disable kitty's protocol extension for clipboard concatenation. The
#: default is to allow writing to the clipboard and primary selection
#: with concatenation enabled. Note that enabling the read
#: functionality is a security risk as it means that any program, even
#: one running on a remote server via SSH can read your clipboard.

# allow_hyperlinks yes

#: Process hyperlink (OSC 8) escape sequences. If disabled OSC 8
#: escape sequences are ignored. Otherwise they become clickable
#: links, that you can click by holding down ctrl+shift and clicking
#: with the mouse. The special value of ``ask`` means that kitty will
#: ask before opening the link.

# term xterm-kitty

#: The value of the TERM environment variable to set. Changing this
#: can break many terminal programs, only change it if you know what
#: you are doing, not because you read some advice on Stack Overflow
#: to change it. The TERM variable is used by various programs to get
#: information about the capabilities and behavior of the terminal. If
#: you change it, depending on what programs you run, and how
#: different the terminal you are changing it to is, various things
#: from key-presses, to colors, to various advanced features may not
#: work. Changing this option by reloading the config will only affect
#: newly created windows.

#: }}}

#: OS specific tweaks {{{
macos_option_as_alt both
# macos_hide_from_tasks no
#: Hide the kitty window from running tasks (âŒ˜+Tab) on macOS. Changing
#: this setting by reloading the config is not supported.
macos_quit_when_last_window_closed yes
macos_thicken_font 0.25

# macos_traditional_fullscreen no
# macos_show_window_title_in all


#: Keyboard shortcuts {{{

#: Keys are identified simply by their lowercase unicode characters.
#: For example: ``a`` for the A key, ``[`` for the left square bracket
#: key, etc. For functional keys, such as ``Enter or Escape`` the
#: names are present at https://sw.kovidgoyal.net/kitty/keyboard-
#: protocol.html#functional-key-definitions. For a list of modifier
#: names, see: GLFW mods
#: <https://www.glfw.org/docs/latest/group__mods.html>

#: Finally, you can use raw system key codes to map keys, again only
#: for keys that are not known as GLFW keys. To see the system key
#: code for a key, start kitty with the kitty --debug-input option.
#: Then kitty will output some debug text for every key event. In that
#: text look for ``native_code`` the value of that becomes the key
#: name in the shortcut. For example:

#: .. code-block:: none

#:     on_key_input: glfw key: 65 native_code: 0x61 action: PRESS mods: 0x0 text: 'a'

#: Here, the key name for the A key is 0x61 and you can use it with::

#:     map ctrl+0x61 something

#: to map ctrl+a to something.

#: You can use the special action no_op to unmap a keyboard shortcut
#: that is assigned in the default configuration::

#:     map kitty_mod+space no_op

#: You can combine multiple actions to be triggered by a single
#: shortcut, using the syntax below::

#:     map key combine <separator> action1 <separator> action2 <separator> action3 ...

#: For example::

#:     map kitty_mod+e combine : new_window : next_layout

#: this will create a new window and switch to the next available
#: layout

#: You can use multi-key shortcuts using the syntax shown below::

#:     map key1>key2>key3 action

#: For example::

#:     map ctrl+f>2 set_font_size 20

clear_all_shortcuts yes
kitty_mod           ctrl+alt+shift

#: The value of kitty_mod is used as the modifier for all default
#: shortcuts, you can change it in your kitty.conf to change the
#: modifiers for all the default shortcuts.

# kitten_alias hints hints --hints-offset=0
#: Clipboard {{{

map cmd+c               copy_to_clipboard

map cmd+v               paste_from_clipboard

#: Scrolling {{{
map kitty_mod+up        scroll_line_up
map kitty_mod+down      scroll_line_down
map kitty_mod+page_up   scroll_page_up
map kitty_mod+page_down scroll_page_down
map kitty_mod+home      scroll_home
map kitty_mod+end       scroll_end

#: Window management {{{
map kitty_mod+l         move_window_backward
map kitty_mod+u         previous_window
map kitty_mod+y         next_window
map kitty_mod+backspace         move_window_forward
map kitty_mod+j         detach_window    new-tab


map kitty_mod+enter     new_window_with_cwd
map cmd+enter           new_window_with_cwd
map cmd+w               close_window
map cmd+shift+n         new_os_window_with_cwd


map kitty_mod+h         start_resizing_window

#: }}}

#: Tab management {{{
map kitty_mod+n         move_tab_backward
map kitty_mod+e         previous_tab
map kitty_mod+i         next_tab
map kitty_mod+o         move_tab_forward
map kitty_mod+m         detach_tab       new

map kitty_mod+c         new_tab_with_cwd

map ctrl+shift+tab      previous_tab
map ctrl+tab            next_tab
map cmd+t               new_tab_with_cwd
map cmd+n               new_tab_with_cwd
map cmd+r               set_tab_title

#: Layout management {{{
map kitty_mod+k         next_layout
#: }}}

#: Font sizes {{{
map kitty_mod+plus     change_font_size all +2.0
map kitty_mod+minus     change_font_size all -2.0
map kitty_mod+equal change_font_size all 0
#: }}}

#: Select and act on visible text {{{

#: Use the hints kitten to select text and either pass it to an
#: external program or insert it into the terminal or copy it to the
#: clipboard.

map kitty_mod+/         kitten           hints

#: Open a currently visible URL using the keyboard. The program used
#: to open the URL is specified in open_url_with.

# map kitty_mod+p>f kitten hints --type path --program -

#: Select a path/filename and insert it into the terminal. Useful, for
#: instance to run git commands on a filename output from a previous
#: git command.

# map kitty_mod+p>shift+f kitten hints --type path

#: Select a path/filename and open it with the default open program.

# map kitty_mod+p>l kitten hints --type line --program -

#: Select a line of text and insert it into the terminal. Use for the
#: output of things like: ls -1

# map kitty_mod+p>w kitten hints --type word --program -

#: Select words and insert into terminal.

# map kitty_mod+p>h kitten hints --type hash --program -

#: Select something that looks like a hash and insert it into the
#: terminal. Useful with git, which uses sha1 hashes to identify
#: commits

# map kitty_mod+p>n kitten hints --type linenum

#: Select something that looks like filename:linenum and open it in
#: vim at the specified line number.

# map kitty_mod+p>y kitten hints --type hyperlink

#: Select a hyperlink (i.e. a URL that has been marked as such by the
#: terminal program, for example, by ls --hyperlink=auto).


#: The hints kitten has many more modes of operation that you can map
#: to different shortcuts. For a full description see kittens/hints.
#: }}}

#: Miscellaneous {{{

# map kitty_mod+f11    toggle_fullscreen
# map kitty_mod+f10    toggle_maximized
# map kitty_mod+u      kitten unicode_input
# map kitty_mod+f2     edit_config_file
# map kitty_mod+escape kitty_shell window

#: Open the kitty shell in a new window/tab/overlay/os_window to
#: control kitty using commands.

# map kitty_mod+a>m    set_background_opacity +0.1
# map kitty_mod+a>l    set_background_opacity -0.1
# map kitty_mod+a>1    set_background_opacity 1
# map kitty_mod+a>d    set_background_opacity default
# map kitty_mod+delete clear_terminal reset active

#: You can create shortcuts to clear/reset the terminal. For example::

#:     # Reset the terminal
#:     map kitty_mod+f9 clear_terminal reset active
#:     # Clear the terminal screen by erasing all contents
#:     map kitty_mod+f10 clear_terminal clear active
#:     # Clear the terminal scrollback by erasing it
#:     map kitty_mod+f11 clear_terminal scrollback active
#:     # Scroll the contents of the screen into the scrollback
#:     map kitty_mod+f12 clear_terminal scroll active

#: If you want to operate on all windows instead of just the current
#: one, use all instead of active.

#: It is also possible to remap Ctrl+L to both scroll the current
#: screen contents into the scrollback buffer and clear the screen,
#: instead of just clearing the screen, for example, for ZSH add the
#: following to ~/.zshrc:

#: .. code-block:: sh

#:     scroll-and-clear-screen() {
#:         printf '\n%.0s' {1..$LINES}
#:         zle clear-screen
#:     }
#:     zle -N scroll-and-clear-screen
#:     bindkey '^l' scroll-and-clear-screen

# map kitty_mod+f5 load_config_file

#: Reload kitty.conf, applying any changes since the last time it was
#: loaded. Note that a handful of settings cannot be dynamically
#: changed and require a full restart of kitty.  You can also map a
#: keybinding to load a different config file, for example::

#:     map f5 load_config /path/to/alternative/kitty.conf

#: Note that all setting from the original kitty.conf are discarded,
#: in other words the new conf settings *replace* the old ones.

# map kitty_mod+f6 debug_config

#: Show details about exactly what configuration kitty is running with
#: and its host environment. Useful for debugging issues.


#: You can tell kitty to send arbitrary (UTF-8) encoded text to the
#: client program when pressing specified shortcut keys. For example::

#:     map ctrl+alt+a send_text all Special text

#: This will send "Special text" when you press the ctrl+alt+a key
#: combination.  The text to be sent is a python string literal so you
#: can use escapes like \x1b to send control codes or \u21fb to send
#: unicode characters (or you can just input the unicode characters
#: directly as UTF-8 text). The first argument to send_text is the
#: keyboard modes in which to activate the shortcut. The possible
#: values are normal or application or kitty or a comma separated
#: combination of them.  The special keyword all means all modes. The
#: modes normal and application refer to the DECCKM cursor key mode
#: for terminals, and kitty refers to the special kitty extended
#: keyboard protocol.

#: Another example, that outputs a word and then moves the cursor to
#: the start of the line (same as pressing the Home key)::

#:     map ctrl+alt+a send_text normal Word\x1b[H
#:     map ctrl+alt+a send_text application Word\x1bOH

#: }}}

#: }}}
